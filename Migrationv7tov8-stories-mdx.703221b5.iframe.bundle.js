/*! For license information please see Migrationv7tov8-stories-mdx.703221b5.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkatlas_ui_components=self.webpackChunkatlas_ui_components||[]).push([[7139],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components},[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8,kL:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.kL,oz:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oz,uY:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.uY});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./src/stories-migration/Migrationv7tov8.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>Migrationv7tov8_stories});__webpack_require__("./node_modules/react/index.js");var lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Migration/Migrating v7 to v8, v9"}),"\n",(0,jsx_runtime.jsx)(dist.oz,{children:'# Migration Guide Index ATLAS v7 to v8, v9\n\n- [Migrating from ATLAS v7 to v8, v9](#migrating-from-atlas-v7-to-v8)\n  - [Pre-Migration Recommendation](#-pre-migration-recommendation)\n  - [Step 1: Install the Migration Library](#-step-1-install-the-migration-library)\n  - [Step 2: Execute the Migration Script](#-step-2-execute-the-migration-script)\n  - [Step 3: Update Your Dependencies](#-step-3-update-your-dependencies)\n  - [Step 4: Install Dependencies](#-step-4-install-dependencies)\n  - [Step 5: Run Your Application](#-step-5-run-your-application)\n  - [Final Checks](#-final-checks)\n  - [Post Migration](#-post-migration)\n  - [Need Help?](#-need-help)\n  \n---\n\n# Migrating from ATLAS v7 to v8, v9\n\nWe\'re excited to announce the release of **Atlas Component Library and Design System version 8**! Below are the key steps to guide you through the migration from Atlas v7 to v8.\n\n## Step-by-Step Migration Guide\n\n### **üìå Pre-Migration Recommendation**\n\nBefore starting, we recommend deleting the `node_modules` and `dist` folders to ensure a smooth and optimized migration process.\n\n```sh\nrm -rf node_modules dist\n\n```\n\n### üöÄ Step 1: Install the Migration Library\n\n#### Option 1: Install the package from GitHub Packages\n\n1. To install the library from **GitHub Packages**, ensure your registry is configured as follows:\n\n```bash\n@mmctech:registry=https://npm.pkg.github.com/\n//npm.pkg.github.com/:_authToken=YOUR-GITHUB-TOKEN\nregistry=https://registry.npmjs.org/\n```\n\nReplace YOUR-GITHUB-TOKEN with your personal access token. You can generate a token by following the instructions in the [GitHub documentation](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#authenticating-to-the-registry).\n\n> üí° **NOTE:** You can configure this globally or specifically for your project by creating a `.npmrc` file and adding the lines mentioned above.\n\n2. Go to the root directory of your frontend project repository that you wish to migrate to Atlas, and execute the following command:\n\n```bash\nnpm install lib-atlas-migration@npm:@mmctech/lib-atlas-migration --save-dev\n```\n\nor if you encounter compatibility issues, add the `--legacy-peer-deps` flag\n\n```bash\nnpm install lib-atlas-migration@npm:@mmctech/lib-atlas-migration --save-dev --legacy-peer-deps\n```\n\n#### Option 2: Install the package manually\n\n 1. Download the package from the following link:\n  <a target="_blank" download href="./lib-atlas-migration.tgz">\n      <strong>lib-atlas-migration.tgz</strong>\n  </a>\n\n2. Place the `lib-atlas-migration.tgz` file in the root directory of your project.\n\n3. Modify the `package.json` file of your project to include the following:\n\n```json\n"devDependencies": {\n  "lib-atlas-migration": "file:lib-atlas-migration.tgz"\n}\n```\n\n> ‚ö†Ô∏è **IMPORTANT**: Ensure that the `lib-atlas-migration.tgz` file is located in the root directory of your project. If you place it in a different location, update the path accordingly in the `package.json` file.\n\n4. Install the package by running the following command:\n\n```bash\nnpm install\n```\n\nor if you encounter compatibility issues, add the `--legacy-peer-deps` flag to the command.\n\n```bash\nnpm install --legacy-peer-deps\n```\n\n### ‚öôÔ∏è Step 2: Execute the Migration Script\n\nRun the migration script to apply necessary changes:\n\n```sh\nng g lib-atlas-migration:v7tov8\n```\n\n### üì¶ Step 3: Update Your Dependencies\n\nYou need to update all Atlas libraries to VERSION ^8.0.2 or ^9.0.0 in your `package.json` file.\n\n### For local development\n\n    "atlas-cdk": "npm:@mmctech/atlas-cdk@^VERSION",\n    "atlas-accordion": "npm:@mmctech/atlas-accordion@^VERSION",\n    "atlas-alert": "npm:@mmctech/atlas-alert@^VERSION",\n    "atlas-app-bar": "npm:@mmctech/atlas-app-bar@^VERSION",\n    "atlas-avatar": "npm:@mmctech/atlas-avatar@^VERSION",\n    "atlas-badge": "npm:@mmctech/atlas-badge@^VERSION",\n    "atlas-button": "npm:@mmctech/atlas-button@^VERSION",\n    "atlas-card": "npm:@mmctech/atlas-card@^VERSION",\n    "atlas-checkbox": "npm:@mmctech/atlas-checkbox@^VERSION",\n    "atlas-chips": "npm:@mmctech/atlas-chips@^VERSION",\n    "atlas-divider": "npm:@mmctech/atlas-divider@^VERSION",\n    "atlas-drawer": "npm:@mmctech/atlas-drawer@^VERSION",\n    "atlas-field": "npm:@mmctech/atlas-field@^VERSION",\n    "atlas-icon": "npm:@mmctech/atlas-icon@^VERSION",\n    "atlas-link": "npm:@mmctech/atlas-link@^VERSION",\n    "atlas-list": "npm:@mmctech/atlas-list@^VERSION",\n    "atlas-menu": "npm:@mmctech/atlas-menu@^VERSION",\n    "atlas-pagination": "npm:@mmctech/atlas-pagination@^VERSION",\n    "atlas-progress": "npm:@mmctech/atlas-progress@^VERSION",\n    "atlas-switch": "npm:@mmctech/atlas-switch@^VERSION",\n    "atlas-table": "npm:@mmctech/atlas-table@^VERSION",\n    "atlas-tabs": "npm:@mmctech/atlas-tabs@^VERSION",\n    "atlas-tooltip": "npm:@mmctech/atlas-tooltip@^VERSION"\n    ...\n\n### For the dev - stg - prod environment use\n\n    "atlas-cdk": "^VERSION",\n    "atlas-accordion": "^VERSION",\n    "atlas-alert": "^VERSION",\n    "atlas-app-bar": "^VERSION",\n    "atlas-avatar": "^VERSION",\n    "atlas-badge": "^VERSION",\n    "atlas-button": "^VERSION",\n    "atlas-card": "^VERSION",\n    "atlas-checkbox": "^VERSION",\n    "atlas-chips": "^VERSION",\n    "atlas-divider": "^VERSION",\n    "atlas-drawer": "^VERSION",\n    "atlas-field": "^VERSION",\n    "atlas-icon": "^VERSION",\n    "atlas-link": "^VERSION",\n    "atlas-list": "^VERSION",\n    "atlas-menu": "^VERSION",\n    "atlas-pagination": "^VERSION",\n    "atlas-progress": "^VERSION",\n    "atlas-switch": "^VERSION",\n    "atlas-tabs": "^VERSION",\n    "atlas-table": "^VERSION",\n    "atlas-tooltip": "^VERSION",\n    ...\n\n### üì• Step 4: Install Dependencies\n\n```sh\nnpm install\n\n```\n\n### üöÄ Step 5: Run Your Application\n\nStart your application to verify that everything compiles correctly.\n\n### ‚úÖ Final Checks\n\n- Verify that your UI and all functionalities are working as intended.\n\n## üõ†Ô∏è Post Migration\n- Refer to the documentation for guidance on using tokens, and prioritize `semanticColor` over primitive values to improve maintainability. Please check the [üîó Colors](http://localhost:6006/?path=/docs/adopters-design-colors--docs) and also the new [üîó Typography](http://localhost:6006/?path=/docs/adopters-design-typography--docs) section for more information. \n- If you need to apply a custom theme for specific edge cases, consult the [üîó Setup](http://localhost:6006/?path=/docs/get-started-setup--docs) documentation.\n- When using enum classes from components such as buttons or chips, always import them from the `atlas-cdk` package to ensure type safety and maintainability:\n\n```sh\nimport { Actions, BoxShadows, ThemingService, Radii, ButtonVariants, Styles, Colors } from \'atlas-cdk\';\n```\n- Using `action` instead of `color`, or `variant` instead of `style`, is supported for backward compatibility. However, for future development, it is recommended to use `color` and `style` for better readability and maintainability.\n- Note that in v9, default values have changed for some components (e.g., buttons, chips). Review your code and update it to use the appropriate `color` or `style` values as needed.\n\n### üí° Need Help?\n\nIf you encounter any issues during the migration, feel free to reach out via GitHub issues or atlas support channel:\n\n[üîó GitHub Issues](https://github.com/mmctech/proxima-atlas/issues)\n'})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Migration/Migrating v7 to v8, v9",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}};const Migrationv7tov8_stories=componentMeta,__namedExportsOrder=["__page"]}}]);