"use strict";(self.webpackChunkatlas_ui_components=self.webpackChunkatlas_ui_components||[]).push([[1758],{"./src/stories-design/DialogStacked.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Stacked:()=>Stacked,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var DialogTest_1,tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),atlas_button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./dist/atlas-button/fesm2022/atlas-button.mjs"),atlas_cdk__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./dist/atlas-cdk/fesm2022/atlas-cdk.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),storybook_addon_designs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/storybook-addon-designs/esm/index.js"),_storybook_constants__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./.storybook/constants.ts");let DialogTest=class DialogTest{static{DialogTest_1=this}dialog;dialogRef;data;variantText=atlas_button__WEBPACK_IMPORTED_MODULE_3__.hd.text;actions=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.En;constructor(dialog,dialogRef,data){this.dialog=dialog,this.dialogRef=dialogRef,this.data=data,data.count=Math.floor(100*Math.random())}onNoClick(){this.dialogRef.close({data:"Close"})}closeAll(){this.dialog.closeAll()}openDialog(){let size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.small;switch(Math.floor(4*Math.random())){case 0:default:size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.small;break;case 1:size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.medium;break;case 2:size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.large;break;case 3:size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.xlarge}this.dialog.open(DialogTest_1,{disableClose:!0,autoFocus:!1,hasBackdrop:!0,backdropClass:"no-class",size,data:{title:`Data Title - ${this.data.count}`,content:`Data Content - ${this.data.count}`,count:this.data.count}})}static ctorParameters=()=>[{type:atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.lG},{type:atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.ce},{type:void 0,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,args:[atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.pm]}]}]};DialogTest=DialogTest_1=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"dialog-test",template:'\n  <div dialogTitle>{{data.title}}</div>\n  <div dialogContent>{{data.content}}</div>\n  <div dialogActions align="end">\n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="openDialog()">Open Other</atlas-button>      \n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="onNoClick()">Close</atlas-button>\n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="closeAll()">Close All</atlas-button>\n  </div>'})],DialogTest);let LaunchDialogComponent=class LaunchDialogComponent{_dialog;title="";content="";size=atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.medium;autofocus=!1;hasBackdrop=!1;disableClose=!0;constructor(_dialog){this._dialog=_dialog}open(){const count=Math.floor(100*Math.random());this._dialog.open(DialogTest,{autoFocus:this.autofocus,size:this.size,hasBackdrop:this.hasBackdrop,disableClose:this.disableClose,data:{title:`${this.title} - ${count}`,content:`${this.content} - ${count}`}})}static ctorParameters=()=>[{type:atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.lG}];static propDecorators={title:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],content:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],autofocus:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],hasBackdrop:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],disableClose:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}]}};LaunchDialogComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"launcher",template:'\n     <atlas-button (click)="open()">Open dialog</atlas-button>\n  '})],LaunchDialogComponent);const __WEBPACK_DEFAULT_EXPORT__={title:"Adopters/Components/Modal/Dialog/Stacked",component:LaunchDialogComponent,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_5__.moduleMetadata)({declarations:[DialogTest],imports:[atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.Ph,_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__.BrowserAnimationsModule,atlas_button__WEBPACK_IMPORTED_MODULE_3__.tm]}),storybook_addon_designs__WEBPACK_IMPORTED_MODULE_6__.tb],parameters:{badges:[_storybook_constants__WEBPACK_IMPORTED_MODULE_7__.h.ALPHA],controls:{sort:"requiredFirst"},options:{isToolshown:!0},docs:{description:{component:"Finish LaunchDialogComponent"}}}},Stacked=(args=>({props:{...args}})).bind({});Stacked.args={...Stacked.args,title:"Data Title",content:"Data Content",count:1,size:atlas_cdk__WEBPACK_IMPORTED_MODULE_4__.SU.small,autofocus:!1,hasBackdrop:!0,disableClose:!0},Stacked.parameters={docs:{source:{code:'\n\nimport { ButtonModule, ButtonVariants } from \'atlas-button\';\nimport { Actions, Dialog, DialogModule, DialogRef, DialogSizings, HALO_DIALOG_DATA } from \'atlas-cdk\';\n\n/** Dialog Test */\n@Component({\n  selector: \'dialog-test\',\n  template: `\n  <div dialogTitle>{{data.title}}</div>\n  <div dialogContent>{{data.content}}</div>\n  <div dialogActions align="end">\n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="openDialog()">Open Other</atlas-button>      \n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="onNoClick()">Close</atlas-button>\n    <atlas-button [variant]="variantText" [action]="actions.primary" (onClick)="closeAll()">Close All</atlas-button>\n  </div>`\n  ,\n})\nexport class DialogTest {\n  variantText: ButtonVariants = ButtonVariants.text;\n  actions = Actions;\n\n  constructor(\n    public dialog: Dialog,\n    public dialogRef: DialogRef<DialogTest>,\n    @Inject(HALO_DIALOG_DATA) public data: any) { \n      data.count++;\n    }\n\n  onNoClick(): void {\n    this.dialogRef.close({ data: \'Close\' });\n  }\n\n  closeAll(): void {\n    this.dialog.closeAll();\n  }\n\n  openDialog(): void {\n    const dialogRef = \n      this.dialog.open(DialogTest, \n        {\n          disableClose:true, \n          autoFocus: false, \n          data: {title: `Data Title - ${this.data.count}`, content: `Data Content - ${this.data.count}`, count: this.data.count }}\n      );\n  }\n}\n/** Finish Dialog Test */\n\n/** LaunchDialogComponent launch DialogTest component as a modal dialog */\n@Component({\n  selector: \'launcher\',\n  template: `\n     <atlas-button (click)="open()">Open dialog</atlas-button>\n  `\n})\nclass LaunchDialogComponent {\n  /** Example of title */\n  @Input() title: string = \'\';\n  /** Example of content */  \n  @Input() content: string = \'\';\n  /** Sizings of dialog*/\n  @Input() size: DialogSizings = DialogSizings.medium;\n  /** Whether the dialog should focus the first focusable element on open. */\n  @Input() autofocus: boolean = false;\n  /** Whether the dialog has a backdrop. */\n  @Input() hasBackdrop: boolean = true;\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  @Input() disableClose: boolean = true;\n  constructor(private _dialog: Dialog) { }\n\n  open(): void {\n    const count = 1;\n    this._dialog.open(DialogTest, {\n        autoFocus: this.autofocus,\n        size: this.size,\n        hasBackdrop: this.hasBackdrop,\n        disableClose: this.disableClose,\n        data: {\n            title: `${this.title} - ${count}`,\n            content: `${this.content} - ${count}`\n        }\n    });\n  }\n}\n/** Finish LaunchDialogComponent  */\n'}}},Stacked.parameters={...Stacked.parameters,docs:{...Stacked.parameters?.docs,source:{originalSource:"(args: LaunchDialogComponent) => ({\n  props: {\n    ...args\n  }\n})",...Stacked.parameters?.docs?.source}}};const __namedExportsOrder=["Stacked"]}}]);